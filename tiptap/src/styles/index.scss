:root {
  --f-tiptap-editor--transition: box-shadow 0.15s ease-in-out;
  --f-tiptap-editor--border-color: #c9cbcc;
  --f-tiptap-editor--border-color--focused: #3b4548;
  --f-tiptap-editor--border-radius: 4px;
  --f-tiptap-editor-content-wrap--padding-x: 6rem;
  --f-tiptap-editor-content-wrap--padding-x-rich-text: 1rem;
  --f-tiptap-editor-content-wrap--padding-y: 1rem;
  --f-tiptap-editor-content-wrap--padding-x-mobile: 1rem;
  --f-tiptap-editor-content-wrap--padding-y-mobile: 1rem;

  --f-tiptap--tt-default-content-spacer: 1.5rem;
  --f-tiptap--tt-default-headings-font-weight: bold;

  --f-tiptap--tt-list-item-spacer: 0.5rem;

  --f-tiptap--tt-h1-margin: 3rem 0 var(--f-tiptap--tt-default-content-spacer);
  --f-tiptap--tt-h1-font-size: 2.5rem;

  --f-tiptap--tt-h2-margin: 2.5rem 0 var(--f-tiptap--tt-default-content-spacer);
  --f-tiptap--tt-h2-font-size: 2rem;

  --f-tiptap--tt-h3-margin: 2rem 0 var(--f-tiptap--tt-default-content-spacer);
  --f-tiptap--tt-h3-font-size: 1.5rem;

  --f-tiptap--tt-h4-margin: var(--f-tiptap--tt-h3-margin);
  --f-tiptap--tt-h4-font-size: 1.25rem;

  --f-tiptap--tt-hr-margin: 3rem;
}

html,
body {
  overflow: hidden;
  min-width: 320px;
  margin: 0;
}

body {
  display: flex;
  flex-direction: column;
}

html,
body,
#folio-tiptap-dev-root,
.f-tiptap-iframe-content {
  height: 100vh;
}

.f-tiptap-editor {
  display: flex;
  flex-direction: column;

  &--block {
    min-height: 500px;
  }

  &--rich-text {
    --f-tiptap-editor-content-wrap--padding-x: var(--f-tiptap-editor-content-wrap--padding-x-rich-text);

    border: 1px solid var(--f-tiptap-editor--border-color);
    border-radius: var(--f-tiptap-editor--border-radius);
    transition: var(--f-tiptap-editor--transition);
    min-height: 140px + 2px;

    &.f-tiptap-editor--focused {
      border-color: var(--f-tiptap-editor--border-color--focused);
    }
  }

  .f-tiptap-iframe-content--console-aside &--block {
    height: 100vh;
  }
}

.f-tiptap-editor-toolbar {
  flex: 0 0 auto;
}

.f-tiptap-editor__content-wrap {
  flex: 0 1 auto;
  position: relative;
  overflow: auto;
  padding: var(--f-tiptap-editor-content-wrap--padding-y) var(--f-tiptap-editor-content-wrap--padding-x) ;

  @media screen and (max-width: 400px) {
    padding: var(--f-tiptap-editor-content-wrap--padding-y-mobile) var(--f-tiptap-editor-content-wrap--padding-x-mobile);
  }
}

// fix bubble menu z-index
.f-tiptap-editor__content {
  > .tiptap {
    position: relative;
    z-index: 1;

    & ~ div {
      z-index: 2;
    }
  }
}

.f-tiptap-editor p.is-empty,
.f-tiptap-editor h2.is-empty,
.f-tiptap-editor h3.is-empty,
.f-tiptap-editor h4.is-empty {
  position: relative;

  &::before {
    color: #adb5bd;
    content: attr(data-placeholder);
    pointer-events: none;
    position: absolute;
    top: 0;
    left: 0;
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width: 100%;
    overflow: hidden;
    height: 100%;
  }
}

.f-tiptap-editor .node-folioTiptapNode {
  position: relative;
  z-index: 2;

  &::after,
  &::before {
    content: "";
    position: absolute;
    inset: -0.5rem;
    background: var(--tt-selection-color);
    border-radius: var(--f-tiptap-editor--border-radius);
    z-index: 3;
    opacity: 0.5;
    visibility: hidden;
    pointer-events: none;
  }

  &::before {
    opacity: 1;
    z-index: 1;
  }

  &.ProseMirror-selectednode {
    &::before,
    &::after {
      visibility: visible;
    }
  }
}

.f-c-tiptap-invalid-node {
  align-items: center;
  background: #F0655D;
  border-radius: 4px;
  box-shadow: 0px 5px 3px 0px rgba(0, 0, 0, 0.15), 2px 2px 15px 2px rgba(0, 0, 0, 0.15);
  color: #ffffff;
  display: flex;
  flex-direction: column;
  gap: 8px;
  padding: 24px;
  text-align: center;

  &__title {
    font-size: 18px;
    font-weight: 700;
    line-height: 120%;
  }

  &__name {
    font-size: 16px;
    font-weight: 400;
    line-height: 140%;
  }

  &__small {
    font-size: 12px;
    font-weight: 400;
    line-height: 140%;
  }
}

.tiptap.ProseMirror {
  outline: none;
  caret-color: var(--tt-cursor-color);

  // Selection styles
  &:not(.readonly):not(.ProseMirror-hideselection) {
    ::selection {
      background-color: var(--tt-selection-color);
    }

    .selection::selection {
      background: transparent;
    }
  }

  .selection {
    display: inline;
    background-color: var(--tt-selection-color);
  }

  .ProseMirror-hideselection {
    caret-color: transparent;
  }
}
