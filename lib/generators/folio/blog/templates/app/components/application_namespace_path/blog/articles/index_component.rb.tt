# frozen_string_literal: true

class <%= application_namespace %>::Blog::Articles::IndexComponent < ApplicationComponent
  include Pagy::Backend

  def initialize(articles_scope: nil, title: nil, perex: nil, author: nil, topic: nil)
    @articles_scope = articles_scope || <%= application_namespace %>::Blog::Article
    @title = title
    @perex = perex
    @author = author
    @topic = topic
    @url_base = author || <%= application_namespace %>::Blog::Article
  end

  def use_hero_size?
    return false if @pagy && @pagy.page != 1
    return false if params[<%= application_namespace %>::Blog::TOPICS_PARAM].present?
    true
  end

  def before_render
    articles = @articles_scope.published
                              .by_locale(locale)
                              .by_site(current_site)

    @topics = if @topic
      nil
    else
      scope = <%= application_namespace %>::Blog::Topic.published
                                  .by_locale(locale)
                                  .by_site(current_site)
                                  .ordered

      if @author
        topic_ids = <%= application_namespace %>::Blog::TopicArticleLink.where(<%= application_namespace_path %>_blog_article_id: articles.select(:id)).select(:<%= application_namespace_path %>_blog_topic_id)
        scope.where(id: topic_ids)
      else
        scope.with_published_articles
      end

      scope.ordered
                   .limit(50)
    end

    articles = articles.public_filter_by_topics(params[<%= application_namespace %>::Blog::TOPICS_PARAM])
                       .includes(<%= application_namespace %>::Blog.article_includes)
                       .ordered

    if params[:page].blank? || !params[:page].match?(/\A\d+\z/) || params[:page].to_i <= 1
      @pagy, @articles = pagy(articles, items: <%= application_namespace %>::Blog::ARTICLE_PAGY_ITEMS + 1)
    else
      @pagy, @articles = pagy(articles.offset(1), items: <%= application_namespace %>::Blog::ARTICLE_PAGY_ITEMS, outset: 1)
    end
  end
end
