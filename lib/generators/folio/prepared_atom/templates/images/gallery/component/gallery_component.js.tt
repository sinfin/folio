//= require justified-layout
//= require folio/debounce

window.Folio.Stimulus.register('<%= classname_prefix %>-atom-images-gallery', class extends window.Stimulus.Controller {
  static targets = ["loaderWrap", "item", "wrap"]

  static values = {
    targetHeightDesktop: Number,
  }

  connect () {
    this.align()

    this.debouncedAlign = Folio.debounce(this.align.bind(this))
    window.addEventListener('resize', this.debouncedAlign)
    window.addEventListener('orientationchange', this.debouncedAlign)
  }

  disconnect () {
    if (this.debouncedAlign) {
      window.removeEventListener('resize', this.debouncedAlign)
      window.removeEventListener('orientationchange', this.debouncedAlign)

      delete this.debouncedAlign
    }
  }

  boxSpacing () {
    if (window.innerWidth < 767) {
      return 16
    } else {
      return 24
    }
  }

  targetRowHeight () {
    if (window.innerWidth < 767) {
      return 100
    } else if (window.innerWidth < 1200) {
      return 200
    } else {
      return this.targetHeightDesktopValue
    }
  }

  align () {
    const ratios = []

    this.itemTargets.forEach((itemTarget) => {
      ratios.push(parseFloat(itemTarget.dataset.ratio))
    })

    const result = window.flickrJustifiedLayout(ratios, {
      containerWidth: this.wrapTarget.clientWidth,
      containerPadding: 0,
      boxSpacing: this.boxSpacing(),
      targetRowHeight: this.targetRowHeight()
    })

    this.wrapTarget.style.height = `${Math.ceil(result.containerHeight)}px`


    for (let i = 0; i < this.itemTargets.length; i += 1) {
      const r = result.boxes[i]
      const itemTarget = this.itemTargets[i]

      itemTarget.style.left = `${r.left}px`
      itemTarget.style.top = `${r.top}px`
      itemTarget.style.width = `${r.width}px`
      itemTarget.style.height = `${r.height}px`
      itemTarget.style.position = 'absolute'
      itemTarget.style.float = 'none'
    }

    if (this.hasLoaderWrapTarget) {
      this.loaderWrapTarget.parentNode.removeChild(this.loaderWrapTarget)
    }
  }
})
