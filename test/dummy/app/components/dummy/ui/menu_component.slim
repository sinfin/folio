- if @menu
  - cache [@menu.id, @menu.updated_at]
    .d-ui-menu[
      class="d-ui-menu--theme-#{@theme || 'light'}"
      class="d-ui-menu--#{@menu.id}"
      data=stimulus_controller("d-ui-menu", values: { \
        id: @menu.id || 0, \
        updated_at: @menu.updated_at.try(:to_i) || 0, \
      })
    ]
      ul.d-ui-menu__ul
        - @menu.menu_items.includes(:page).arrange.each do |menu_item, children|
          li.d-ui-menu__li
            *link_tag(menu_item, children)
              span.d-ui-menu__span
                = cstypo menu_item.to_label

                - if children.present?
                  = dummy_ui_icon(:chevron_down,
                                  class_name: "d-ui-menu__arrow",
                                  height: 16)

            - if children.present?
              ul.d-ui-menu__children-ul
                - children.each do |child, _children|
                  li.d-ui-menu__li
                    *link_tag(child)
                      span.d-ui-menu__span = cstypo child.to_label

        li.d-ui-menu__li.d-ui-menu__li--more[
          hidden=true
          data=stimulus_target('moreLi')
        ]
          span.d-ui-menu__a
            span.d-ui-menu__span
              = t('.more', default: t('more'))

              = dummy_ui_icon(:chevron_down,
                              class_name: "d-ui-menu__arrow",
                              height: 16)

          ul.d-ui-menu__children-ul data=stimulus_target('moreUl')

      span.d-ui-menu__mq.d-ui-menu__mq--desktop data=stimulus_target('mq')

      / use javascript so that we can cache no matter the URL
      javascript:
        (() => {
          const menu = document.querySelector(".d-ui-menu--#{@menu.id}")

          const storedCollapsible = () => {
            const item = window.localStorage.getItem("d-ui-menu--#{@menu.id || 0}")

            if (item) {
              const hash = JSON.parse(item)['#{@menu.updated_at.try(:to_i) || 0}']
              const count = hash && hash[String(window.innerWidth)]

              if (count) {
                const ul = menu.querySelector('.d-ui-menu__ul')
                const target = ul.children.length - 2

                for (let i = 0; i < ul.children.length; i++) {
                  if (i + count > target) {
                    if (!ul.children[i].classList.contains('d-ui-menu__li--more')) {
                      ul.children[i].classList.add('d-ui-menu__li--collapsed')
                    }
                  }
                }

                menu.querySelector('.d-ui-menu__li.d-ui-menu__li--more').hidden = false
                menu.classList.add('d-ui-menu--bound')
              }
            }
          }

          storedCollapsible()

          const markActiveLink = () => {
            const links = menu.querySelectorAll(".d-ui-menu__a")
            const href = window.location.href.replace(/\/$/, '')

            let target = null

            for (let i = 0; i < links.length; i++) {
              const link = links[i]

              if (link.href === href) {
                target = link
                break
              }
            }

            if (target) {
              target.classList.add('d-ui-menu__a--active')

              if (target.closest) {
                const ul = target.closest('.d-ui-menu__children-ul')

                if (ul && ul.previousElementSibling && ul.previousElementSibling.classList.contains('d-ui-menu__a')) {
                  ul.previousElementSibling.classList.add('d-ui-menu__a--active')
                }
              }
            }
          }

          markActiveLink()
        })()
