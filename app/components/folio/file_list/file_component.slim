.f-file-list-file data=data
  .f-file-list-file__image-wrap data=stimulus_target("imageWrap")
    - if @file.present? && @file.respond_to?(:base_thumb)
      .f-file-list-file__image-wrap-bg style=image_wrap_bg_style

      img.f-file-list-file__image[
        src=@file.base_thumb.url
        loading="lazy"
        alt=@file.file_name
        width=@file.base_thumb.width
        height=@file.base_thumb.height
      ]

  - if @template
    = render(Folio::FileList::LoaderComponent.new(data: stimulus_target("loader")))

  - elsif @file.present?
    - if destroy_url
      button[
        class="f-file-list-file__control"
        class="f-file-list-file__control--destroy"
        class=(indestructible_reason ? "f-file-list-file__control--disabled" : nil)
        type="button"
        data=(indestructible_reason ? stimulus_tooltip(indestructible_reason) : stimulus_action("destroy", { url: destroy_url }))
      ]
        = folio_icon(:delete, height: 12)

    - if @editable
      button[
        class="f-file-list-file__control"
        class="f-file-list-file__control--edit"
        type="button"
        data=stimulus_action("edit", { url: modal_api_url })
      ]
        = folio_icon(:edit, height: 12)

    - if @primary_action == :edit
      .f-file-list-file__primary-overlay data=stimulus_action({ click: "edit" }, { url: modal_api_url })

    - if unmet_requirements.present?
      .f-file-list-file__warning data=stimulus_tooltip(unmet_requirements_html, variant: :popover)
        = folio_icon(:alert)

    - if @selectable
      .f-file-list-file__info
        - if @file.file_name.present?
          .f-file-list-file__info-file-name
            = @file.file_name

        - file_information_rows.each do |row|
          .f-file-list-file__info-item
            = row

      - if @file.try(:file_list_count).is_a?(Numeric) && @file.file_list_count > 0
        .f-file-list-file__count-wrap
          span.f-file-list-file__count
            = @file.file_list_count

      - if @file.try(:file_list_source).present?
        .f-file-list-file__source-wrap
          span.f-file-list-file__source
            = @file.file_list_source
