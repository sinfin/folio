.f-c-files-show data=data
  .f-c-files-show__row.row
    .col-lg-6.f-c-files-show__preview-col
      = render(Folio::Console::Files::Show::PreviewComponent.new(file: @file))

    .col-lg
      .f-c-files-show__buttons-outer.mb-h
        .f-c-files-show__buttons
          == cell("folio/console/ui/button", download_button_model)

          - if can_now?(:update, @file)
            = render(Folio::UppyComponent.new(file_type: @file.class.to_s,
                                              max_number_of_files: 1,
                                              existing_id: @file.id))
              == cell("folio/console/ui/button", replace_button_model)

          - if can_now?(:destroy, @file)
            - if @file.indestructible_reason
              .f-c-files-show__button-tooltip data=stimulus_tooltip(@file.indestructible_reason)
                == cell("folio/console/ui/button", destroy_button_model)
            - else
              == cell("folio/console/ui/button", destroy_button_model)

        - if @file.class.human_type == "image"
          = render(Folio::Console::Ui::BooleanToggleComponent.new(record: @file,
                                                                  attribute: :sensitive_content,
                                                                  as: :file,
                                                                  label: true,
                                                                  flash: false))

      .f-c-files-show__meta.small.text-muted.mb-h
        .f-c-files-show__meta-item
          ' #{t(".id")}: #{@file.id}

        - if @file.file_mime_type.present?
          .f-c-files-show__meta-item
            = @file.file_mime_type

        - if @file.created_at.present?
          .f-c-files-show__meta-item.me-auto
            ' #{t(".created_at")}: #{l(@file.created_at.to_date, format: :console_short)}

        .f-c-files-show__meta-item
          == cell("folio/console/state", @file, active: false)

      .f-c-files-show__table
        - table_row_keys.each do |key|
          .f-c-files-show__tr
            .f-c-files-show__th
              = @file.class.human_attribute_name(key)

            .f-c-files-show__td
              = render(Folio::Console::Ui::InPlaceInputComponent.new(attribute: key,
                                                                     record: @file,
                                                                     as: :file,
                                                                     autocomplete: autocomplete_for(key)))

  span.folio-loader.folio-loader--outset-8.f-c-files-show__loader
