@use "sass:math";

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function px-to-rem($px) {
  @return math.div(strip-unit($px), 16) * 1rem;
}

@function rem-to-px($rem) {
  @return 16px * strip-unit($rem);
}

@function to-rem($num) {
  @return math.div(1rem * $num, 16);
}

@function is-px($value) {
  @return is-number($value) and index('px', unit($value)) != null;
}

@mixin media-screen-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  @media screen and (max-width: breakpoint-max($name, $breakpoints)) {
    @content;
  }
}

@mixin media-print-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  @media print, (min-width: breakpoint-min($name, $breakpoints)) {
    @content;
  }
}

@mixin mq-mobile-menu {
  @include media-screen-breakpoint-down(lg) {
    @content;
  }
}

@mixin mq-desktop-menu {
  @include media-print-breakpoint-up(lg) {
    @content;
  }
}

@mixin mq-desktop-menu-screen {
  @include media-breakpoint-up(lg) {
    @content;
  }
}

@mixin unbutton {
  border: 0;
  background: transparent;
  padding: 0;
  appearance: none;
  cursor: pointer;

  &, &:hover, &:focus {
    color: inherit;
    outline: 0;
    box-shadow: none;
  }
}

@mixin unlist {
  margin-bottom: 0;
  padding-left: 0;

  > li {
    list-style: none;
  }
}

@mixin social-sites-hover-color {
  @each $key, $color in $social-sites-colors {
    &--#{$key}:hover {
      color: $color;
    }
  }
}

$enable-folio-dark-mode: true !default;
$enable-folio-dark-mode-based-on-prefers-color-scheme: true !default;

@mixin in-dark-mode {
  @if $enable-folio-dark-mode {
    [data-bs-theme="dark"] & {
      @content;
    }
  }

  @if $enable-folio-dark-mode-based-on-prefers-color-scheme {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }
}
